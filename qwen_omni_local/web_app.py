#!/usr/bin/env python3
"""
Qwen2.5 Omni Âè£ËØ≠ËØÑ‰º∞ Web Â∫îÁî®
ÊîØÊåÅÈü≥È¢ëÊñá‰ª∂‰∏ä‰º†ÂíåÂú®Á∫øËØÑ‰º∞
"""

from flask import Flask, request, jsonify, render_template_string, send_from_directory
from flask_cors import CORS
import os
import json
import logging
from datetime import datetime
from werkzeug.utils import secure_filename
import subprocess
import tempfile
from tts_service import TTSService

# ÈÖçÁΩÆÊó•Âøó
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ÂàõÂª∫FlaskÂ∫îÁî®
app = Flask(__name__)
CORS(app)

# ÈÖçÁΩÆ
UPLOAD_FOLDER = 'uploads'
RESULTS_FOLDER = 'results'
ALLOWED_EXTENSIONS = {'wav', 'mp3', 'flac', 'm4a', 'ogg', 'webm'}

# ÂàõÂª∫ÂøÖË¶ÅÁöÑÁõÆÂΩï
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULTS_FOLDER, exist_ok=True)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 50 * 1024 * 1024  # 50MB max file size

# ÂàùÂßãÂåñTTSÊúçÂä°
tts_service = TTSService(
    api_base_url="https://api.guantoufuzhu.com:18000",
    project_id="ea136102"
)

def allowed_file(filename):
    """Ê£ÄÊü•Êñá‰ª∂Êâ©Â±ïÂêçÊòØÂê¶ÂÖÅËÆ∏"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# HTMLÊ®°Êùø
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üé§ Qwen2.5 Omni Âè£ËØ≠ËØÑ‰º∞Á≥ªÁªü</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container { 
            max-width: 1000px; 
            margin: 0 auto; 
            background: white; 
            border-radius: 20px; 
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header { 
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white; 
            padding: 30px; 
            text-align: center; 
        }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .header p { font-size: 1.2em; opacity: 0.9; }
        .content { padding: 40px; }
        .upload-area { 
            border: 3px dashed #4facfe; 
            border-radius: 15px; 
            padding: 40px; 
            text-align: center; 
            margin: 20px 0;
            background: #f8f9ff;
            transition: all 0.3s ease;
        }
        .upload-area:hover { 
            border-color: #667eea; 
            background: #f0f2ff;
        }
        .upload-area.dragover { 
            border-color: #00f2fe; 
            background: #e6f7ff; 
        }
        .file-input { display: none; }
        .upload-btn { 
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white; 
            border: none; 
            padding: 15px 30px; 
            border-radius: 25px; 
            font-size: 1.1em; 
            cursor: pointer; 
            transition: transform 0.2s;
        }
        .upload-btn:hover { transform: translateY(-2px); }
        .form-group { margin: 20px 0; }
        .form-group label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: 600; 
            color: #333;
        }
        .form-group select, .form-group input { 
            width: 100%; 
            padding: 12px; 
            border: 2px solid #e1e5e9; 
            border-radius: 8px; 
            font-size: 1em;
            transition: border-color 0.3s;
        }
        .form-group select:focus, .form-group input:focus { 
            outline: none; 
            border-color: #4facfe; 
        }
        .evaluate-btn { 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; 
            border: none; 
            padding: 12px 30px; 
            border-radius: 25px; 
            font-size: 1em; 
            cursor: pointer; 
            width: 100%;
            margin: 20px 0;
            transition: transform 0.2s;
        }
        .evaluate-btn:hover { transform: translateY(-2px); }
        .evaluate-btn:disabled { 
            background: #ccc; 
            cursor: not-allowed; 
            transform: none;
        }
        .result-area { 
            margin-top: 30px; 
            padding: 20px; 
            background: #f8f9fa; 
            border-radius: 15px; 
            display: none;
        }
        .loading { 
            text-align: center; 
            padding: 40px; 
            color: #667eea;
        }
        .spinner { 
            border: 4px solid #f3f3f3; 
            border-top: 4px solid #667eea; 
            border-radius: 50%; 
            width: 40px; 
            height: 40px; 
            animation: spin 1s linear infinite; 
            margin: 0 auto 20px;
        }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .score-card { 
            background: white; 
            padding: 20px; 
            border-radius: 10px; 
            margin: 15px 0; 
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .score-header { 
            font-size: 1.5em; 
            color: #333; 
            margin-bottom: 15px; 
            text-align: center;
        }
        .score-item { 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
            padding: 10px 0; 
            border-bottom: 1px solid #eee;
        }
        .score-item:last-child { border-bottom: none; }
        .score-value { 
            font-weight: bold; 
            font-size: 1.2em; 
            color: #667eea;
        }
        .suggestions { 
            background: #e8f5e9; 
            padding: 20px; 
            border-radius: 10px; 
            margin: 15px 0;
        }
        .suggestions h3 { color: #2e7d32; margin-bottom: 15px; }
        .suggestions ul { padding-left: 20px; }
        .suggestions li { margin: 8px 0; color: #333; }
        .error { 
            background: #ffebee; 
            color: #c62828; 
            padding: 15px; 
            border-radius: 8px; 
            margin: 15px 0;
        }
        .file-info { 
            background: #e3f2fd; 
            padding: 15px; 
            border-radius: 8px; 
            margin: 15px 0;
        }
        .audio-player {
            width: 100%;
            margin: 15px 0;
        }
        .score-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        .dimension-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
            transition: transform 0.3s ease;
        }
        .dimension-card:hover {
            transform: translateY(-5px);
        }
        .dimension-title {
            font-size: 1.1em;
            font-weight: 600;
            margin-bottom: 10px;
        }
        .dimension-score {
            font-size: 2.5em;
            font-weight: bold;
            margin: 10px 0;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        .dimension-comment {
            font-size: 0.9em;
            opacity: 0.9;
            line-height: 1.4;
        }
        .overall-score {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 30px;
            border-radius: 20px;
            text-align: center;
            margin: 20px 0;
            box-shadow: 0 10px 30px rgba(79, 172, 254, 0.4);
        }
        .overall-score h2 {
            font-size: 3em;
            margin: 0;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        .overall-score p {
            font-size: 1.2em;
            margin: 10px 0 0 0;
            opacity: 0.9;
        }
        .sentences-section {
            background: #f8f9ff;
            padding: 25px;
            border-radius: 15px;
            margin: 20px 0;
        }
        .sentence-item {
            background: white;
            padding: 15px;
            border-radius: 10px;
            margin: 10px 0;
            border-left: 4px solid #4facfe;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .sentence-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
            font-size: 0.9em;
            color: #666;
        }
        .sentence-text {
            font-size: 1.1em;
            line-height: 1.5;
            color: #333;
        }
        .feedback-section {
            background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
            padding: 25px;
            border-radius: 15px;
            margin: 20px 0;
        }
        .feedback-title {
            font-size: 1.3em;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 15px;
            text-align: center;
        }
        .feedback-content {
            background: white;
            padding: 20px;
            border-radius: 10px;
            font-size: 1.1em;
            line-height: 1.6;
            color: #333;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .json-preview {
            background: #2d3748;
            color: #e2e8f0;
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            max-height: 400px;
            overflow-y: auto;
            position: relative;
        }
        .json-toggle {
            background: #4a5568;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
            margin-bottom: 10px;
            font-size: 0.9em;
        }
        .json-toggle:hover {
            background: #2d3748;
        }
        .tab-container {
            margin: 20px 0;
        }
        .tab-buttons {
            display: flex;
            background: #f1f5f9;
            border-radius: 10px 10px 0 0;
            overflow: hidden;
        }
        .tab-button {
            flex: 1;
            padding: 15px;
            background: #f1f5f9;
            border: none;
            cursor: pointer;
            font-size: 1em;
            font-weight: 600;
            color: #64748b;
            transition: all 0.3s ease;
        }
        .tab-button.active {
            background: white;
            color: #4facfe;
            box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
        }
        .tab-content {
            background: white;
            padding: 25px;
            border-radius: 0 0 10px 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .play-btn {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 15px;
            cursor: pointer;
            font-size: 0.8em;
            margin-left: 10px;
            transition: transform 0.2s;
        }
        .play-btn:hover {
            transform: scale(1.05);
        }
        .play-btn:active {
            transform: scale(0.95);
        }
        .tts-info {
            background: #e8f5e9;
            padding: 15px;  
            border-radius: 10px;
            margin: 15px 0;
            border-left: 4px solid #4caf50;
        }
        .tts-info h4 {
            color: #2e7d32;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üé§ AIËã±ËØ≠Âè£ËØ≠ËØÑ‰º∞‰∏ìÂÆ∂</h1>
            <p>Âü∫‰∫éQwen2.5 OmniÁöÑ‰∏ì‰∏öÂè£ËØ≠ÂàÜÊûêÁ≥ªÁªü | AIÊô∫ËÉΩÁîüÊàêËØÑ‰º∞Âª∫ËÆÆ</p>
        </div>
        
        <div class="content">
            <form id="evaluationForm" enctype="multipart/form-data">
                <div class="upload-area" id="uploadArea">
                    <div id="uploadContent">
                        <h3>üìÅ ‰∏ä‰º†Èü≥È¢ëÊñá‰ª∂</h3>
                        <p>ÊîØÊåÅÊ†ºÂºè: WAV, MP3, FLAC, M4A, OGG, WebM</p>
                        <p>ÊúÄÂ§ßÊñá‰ª∂Â§ßÂ∞è: 50MB</p>
                        <br>
                        <button type="button" class="upload-btn" onclick="document.getElementById('audioFile').click()">
                            ÈÄâÊã©Êñá‰ª∂
                        </button>
                        <input type="file" id="audioFile" name="audio_file" class="file-input" accept=".wav,.mp3,.flac,.m4a,.ogg,.webm" onchange="handleFileSelect(this)">
                        <p style="margin-top: 15px; color: #666;">ÊàñÊãñÊãΩÊñá‰ª∂Âà∞Ê≠§Âå∫Âüü</p>
                    </div>
                </div>
                
                <div id="fileInfo" class="file-info" style="display: none;">
                    <h4>üìÑ Â∑≤ÈÄâÊã©Êñá‰ª∂:</h4>
                    <p id="fileName"></p>
                    <p id="fileSize"></p>
                    <audio id="audioPreview" class="audio-player" controls style="display: none;"></audio>
                </div>
                
                <!-- ÁßªÈô§ËØÑ‰º∞Á±ªÂûãÈÄâÊã©ÔºåÂõ∫ÂÆö‰ΩøÁî®‰∏ì‰∏öËØÑ‰º∞ -->
                <input type="hidden" id="promptType" name="prompt_type" value="professional_expert_evaluation">
                
                <div style="display: flex; gap: 10px;">
                    <button type="submit" class="evaluate-btn" id="evaluateBtn" style="flex: 1;">
                        üöÄ ÂºÄÂßãËØÑ‰º∞
                    </button>
                    <button type="button" class="evaluate-btn" id="cleanupBtn" onclick="cleanupFiles()"
                            style="flex: 0 0 150px; background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);">üóëÔ∏è Ê∏ÖÁêÜÊñá‰ª∂</button>
                </div>
            </form>
            
            <div id="resultArea" class="result-area">
                <div id="loadingDiv" class="loading">
                    <div class="spinner"></div>
                    <h3>ü§ñ AIÊ≠£Âú®ÂàÜÊûêÊÇ®ÁöÑÂè£ËØ≠...</h3>
                    <p>ËøôÂèØËÉΩÈúÄË¶Å1-2ÂàÜÈíüÔºåËØ∑ËÄêÂøÉÁ≠âÂæÖ</p>
                </div>
                
                <div id="resultContent" style="display: none;"></div>
            </div>
        </div>
    </div>

    <script>
        // Êñá‰ª∂ÊãñÊãΩÂ§ÑÁêÜ
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('audioFile');
        
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, preventDefaults, false);
        });
        
        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }
        
        ['dragenter', 'dragover'].forEach(eventName => {
            uploadArea.addEventListener(eventName, highlight, false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, unhighlight, false);
        });
        
        function highlight(e) {
            uploadArea.classList.add('dragover');
        }
        
        function unhighlight(e) {
            uploadArea.classList.remove('dragover');
        }
        
        uploadArea.addEventListener('drop', handleDrop, false);
        
        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            
            if (files.length > 0) {
                fileInput.files = files;
                handleFileSelect(fileInput);
            }
        }
        
        // Êñá‰ª∂ÈÄâÊã©Â§ÑÁêÜ
        function handleFileSelect(input) {
            const file = input.files[0];
            if (file) {
                const fileName = document.getElementById('fileName');
                const fileSize = document.getElementById('fileSize');
                const fileInfo = document.getElementById('fileInfo');
                const audioPreview = document.getElementById('audioPreview');
                
                fileName.textContent = file.name;
                fileSize.textContent = `Â§ßÂ∞è: ${(file.size / 1024 / 1024).toFixed(2)} MB`;
                
                // ÊòæÁ§∫Èü≥È¢ëÈ¢ÑËßà
                const url = URL.createObjectURL(file);
                audioPreview.src = url;
                audioPreview.style.display = 'block';
                
                fileInfo.style.display = 'block';
            }
        }
        
        // Ë°®ÂçïÊèê‰∫§Â§ÑÁêÜ
        document.getElementById('evaluationForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const fileInput = document.getElementById('audioFile');
            if (!fileInput.files[0]) {
                alert('ËØ∑ÂÖàÈÄâÊã©Èü≥È¢ëÊñá‰ª∂ÔºÅ');
                return;
            }
            
            const formData = new FormData();
            formData.append('audio_file', fileInput.files[0]);
            formData.append('prompt_type', document.getElementById('promptType').value);
            
            // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
            document.getElementById('resultArea').style.display = 'block';
            document.getElementById('loadingDiv').style.display = 'block';
            document.getElementById('resultContent').style.display = 'none';
            document.getElementById('evaluateBtn').disabled = true;
            
            try {
                const response = await fetch('/api/evaluate', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                // ÈöêËóèÂä†ËΩΩÁä∂ÊÄÅ
                document.getElementById('loadingDiv').style.display = 'none';
                
                if (response.ok) {
                    displayResult(result);
                } else {
                    displayError(result.error || 'ËØÑ‰º∞Â§±Ë¥•');
                }
                
            } catch (error) {
                document.getElementById('loadingDiv').style.display = 'none';
                displayError('ÁΩëÁªúÈîôËØØ: ' + error.message);
            } finally {
                document.getElementById('evaluateBtn').disabled = false;
            }
        });
        
        // ÊòæÁ§∫ËØÑ‰º∞ÁªìÊûú
        function displayResult(result) {
            const resultContent = document.getElementById('resultContent');

            let html = `
                <div class="tab-container">
                    <div class="tab-buttons">
                        <button class="tab-button active" onclick="switchTab('scores')">üìä ËØÑÂàÜÁªìÊûú</button>
                        <button class="tab-button" onclick="switchTab('sentences')">üìù ÂàÜÂè•ÂàÜÊûê</button>
                        <button class="tab-button" onclick="switchTab('feedback')">üí° ÊîπËøõÂª∫ËÆÆ</button>
                        <button class="tab-button" onclick="switchTab('json')">üîç JSONÈ¢ÑËßà</button>
                    </div>

                    <div id="scores-tab" class="tab-content active">
                        ${generateScoresTab(result)}
                    </div>

                    <div id="sentences-tab" class="tab-content">
                        ${generateSentencesTab(result)}
                    </div>

                    <div id="feedback-tab" class="tab-content">
                        ${generateFeedbackTab(result)}
                    </div>

                    <div id="json-tab" class="tab-content">
                        ${generateJsonTab(result)}
                    </div>
                </div>
            `;

            resultContent.innerHTML = html;
            resultContent.style.display = 'block';
        }

        // ÁîüÊàêËØÑÂàÜÊ†áÁ≠æÈ°µ
        function generateScoresTab(result) {
            let html = '';

            // ÊÄª‰ΩìËØÑÂàÜ
            if (result.overall_score) {
                html += `
                    <div class="overall-score">
                        <h2>${result.overall_score}/10</h2>
                        <p>ÊÄª‰ΩìËØÑÂàÜ</p>
                    </div>
                `;
            }

            // ÂêÑÁª¥Â∫¶ËØÑÂàÜ
            html += '<div class="score-grid">';

            const dimensions = [
                { key: 'fluency', name: 'ÊµÅÂà©Â∫¶', icon: 'üó£Ô∏è' },
                { key: 'pronunciation_accuracy', name: 'ÂèëÈü≥ÂáÜÁ°ÆÊÄß', icon: 'üéØ' },
                { key: 'grammatical_accuracy', name: 'ËØ≠Ê≥ïÊ≠£Á°ÆÊÄß', icon: 'üìö' },
                { key: 'lexical_resource', name: 'ËØçÊ±á‰ΩøÁî®', icon: 'üìñ' },
                { key: 'coherence_cohesion', name: 'ËøûË¥ØÊÄß‰∏éÈÄªËæëÊÄß', icon: 'üîó' },
                { key: 'task_fulfillment', name: 'ÂÜÖÂÆπÂÆåÊï¥ÊÄß', icon: '‚úÖ' }
            ];

            dimensions.forEach(dim => {
                if (result[dim.key]) {
                    const score = result[dim.key].score || 0;
                    const comment = result[dim.key].comment || '';
                    html += `
                        <div class="dimension-card">
                            <div class="dimension-title">${dim.icon} ${dim.name}</div>
                            <div class="dimension-score">${score}</div>
                            <div class="dimension-comment">${comment}</div>
                        </div>
                    `;
                }
            });

            html += '</div>';

            // ÁªºÂêàËØÑ‰ª∑
            if (result.overall_comment) {
                html += `
                    <div class="feedback-section">
                        <div class="feedback-title">üìã ÁªºÂêàËØÑ‰ª∑</div>
                        <div class="feedback-content">${result.overall_comment}</div>
                    </div>
                `;
            }

            return html;
        }

        // ÁîüÊàêÂàÜÂè•ÂàÜÊûêÊ†áÁ≠æÈ°µ
        function generateSentencesTab(result) {
            let html = `
                <div class="sentences-section">
                    <h3>üìù Âè•Â≠êÂàÜÊûê</h3>
            `;

            // Ê£ÄÊü•ÊòØÂê¶ÊúâTTSÊñá‰ª∂
            const hasTTS = result.tts_files && result.tts_files.sentences;

            // ‰ΩøÁî®sentence_analysisËÄå‰∏çÊòØsentences
            if (result.sentence_analysis && result.sentence_analysis.length > 0) {
                result.sentence_analysis.forEach((sentence, index) => {
                    // Êü•ÊâæÂØπÂ∫îÁöÑTTSÈü≥È¢ëÊñá‰ª∂
                    let audioFile = null;
                    if (hasTTS && result.tts_files.sentences && result.tts_files.sentences[index]) {
                        audioFile = result.tts_files.sentences[index].audio_file;
                    }

                    html += `
                        <div class="sentence-item">
                            <div class="sentence-meta">
                                <span>Âè•Â≠ê ${sentence.index}</span>
                                <span>ËØçÊï∞: ${sentence.word_count || 0} | Â≠óÁ¨¶Êï∞: ${sentence.character_count || 0} | Â§çÊùÇÂ∫¶: ${sentence.complexity || 'Êú™Áü•'}</span>
                                ${audioFile ? `<button onclick="playAudio('${audioFile}')" class="play-btn">üîä Êí≠Êîæ</button>` : 
                        result.tts_error ? '<span style="color: #e74c3c; margin-left: 10px;">‚ùå TTSÁîüÊàêÂ§±Ë¥•</span>' : 
                        '<span style="color: #999; margin-left: 10px;">Êó†Èü≥È¢ë</span>'}
                            </div>
                            <div class="sentence-text">"${sentence.text}"</div>
                            ${audioFile ? `<audio id="audio-${index}" src="/tts_audio/${audioFile.split('/').pop()}" preload="none"></audio>` : ''}
                        </div>
                    `;
                });
            } else {
                html += '<p>ÊöÇÊó†ÂàÜÂè•ÂàÜÊûêÊï∞ÊçÆ</p>';
            }

            html += '</div>';

            // ËΩ¨ÂΩïÊñáÊú¨
            if (result.transcription) {
                // Êü•ÊâæÂÆåÊï¥ÊñáÊú¨ÁöÑTTSÈü≥È¢ë
                let fullAudioFile = null;
                if (result.tts_files && result.tts_files.full_transcription) {
                    fullAudioFile = result.tts_files.full_transcription.audio_file;
                }

                html += `
                    <div class="feedback-section">
                        <div class="feedback-title">
                            üìÑ ÂÆåÊï¥ËΩ¨ÂΩïÊñáÊú¨
                            ${fullAudioFile ? `<button onclick="playAudio('${fullAudioFile}')" class="play-btn" style="margin-left: 10px;">üîä Êí≠ÊîæÂÆåÊï¥ÊñáÊú¨</button>` : '<span style="color: #999; margin-left: 10px;">Êó†Èü≥È¢ë</span>'}
                        </div>
                        <div class="feedback-content">${result.transcription}</div>
                        ${fullAudioFile ? `<audio id="audio-full" src="/tts_audio/${fullAudioFile.split('/').pop()}" preload="none"></audio>` : ''}
                    </div>
                `;
            }

            return html;
        }

        // ÁîüÊàêÂèçÈ¶àÂª∫ËÆÆÊ†áÁ≠æÈ°µ
        function generateFeedbackTab(result) {
            let html = `
                <div class="feedback-section">
                    <div class="feedback-title">üí° ‰∏™ÊÄßÂåñÂª∫ËÆÆ</div>
                    <div class="feedback-content">
            `;

            if (result.personalized_feedback) {
                html += result.personalized_feedback;
            } else {
                html += 'ÊöÇÊó†‰∏™ÊÄßÂåñÂª∫ËÆÆ';
            }

            html += `
                    </div>
                </div>
            `;

            return html;
        }

        // ÁîüÊàêJSONÈ¢ÑËßàÊ†áÁ≠æÈ°µ
        function generateJsonTab(result) {
            return `
                <button class="json-toggle" onclick="copyJson()">üìã Â§çÂà∂JSON</button>
                <div class="json-preview" id="jsonContent">
                    <pre>${JSON.stringify(result, null, 2)}</pre>
                </div>
            `;
        }

        // ÂàáÊç¢Ê†áÁ≠æÈ°µ
        function switchTab(tabName) {
            // ÈöêËóèÊâÄÊúâÊ†áÁ≠æÈ°µ
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });

            // ÊòæÁ§∫ÈÄâ‰∏≠ÁöÑÊ†áÁ≠æÈ°µ
            document.getElementById(tabName + '-tab').classList.add('active');
            event.target.classList.add('active');
        }

        // Â§çÂà∂JSON
        function copyJson() {
            const jsonContent = document.getElementById('jsonContent').textContent;
            navigator.clipboard.writeText(jsonContent).then(() => {
                alert('JSONÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥ÊùøÔºÅ');
            });
        }

        // Ê∏ÖÁêÜÊñá‰ª∂
        async function cleanupFiles() {
            if (!confirm('Á°ÆÂÆöË¶ÅÊ∏ÖÁêÜÊâÄÊúâ‰∏ä‰º†ÁöÑÊñá‰ª∂ÂíåËØÑ‰º∞ÁªìÊûúÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÊí§ÈîÄÔºÅ')) {
                return;
            }

            const cleanupBtn = document.getElementById('cleanupBtn');
            const originalText = cleanupBtn.innerHTML;
            cleanupBtn.innerHTML = 'üîÑ Ê∏ÖÁêÜ‰∏≠...';
            cleanupBtn.disabled = true;

            try {
                const response = await fetch('/api/cleanup', {
                    method: 'POST'
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    alert(`‚úÖ ${result.message}`);

                    // Ê∏ÖÁêÜÁïåÈù¢
                    document.getElementById('fileInfo').style.display = 'none';
                    document.getElementById('resultArea').style.display = 'none';
                    document.getElementById('audioFile').value = '';

                    const audioPreview = document.getElementById('audioPreview');
                    if (audioPreview.src) {
                        URL.revokeObjectURL(audioPreview.src);
                        audioPreview.src = '';
                        audioPreview.style.display = 'none';
                    }
                } else {
                    alert(`‚ùå Ê∏ÖÁêÜÂ§±Ë¥•: ${result.error || 'Êú™Áü•ÈîôËØØ'}`);
                }

            } catch (error) {
                alert(`‚ùå Ê∏ÖÁêÜÂ§±Ë¥•: ${error.message}`);
            } finally {
                cleanupBtn.innerHTML = originalText;
                cleanupBtn.disabled = false;
            }
        }
        
        // ÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
        function displayError(message) {
            const resultContent = document.getElementById('resultContent');
            resultContent.innerHTML = `<div class="error">‚ùå ${message}</div>`;
            resultContent.style.display = 'block';
        }
        
        // Êí≠ÊîæÈü≥È¢ëÂáΩÊï∞
        function playAudio(audioFile) {
            try {
                // Ê£ÄÊü•audioFileÊòØÂê¶ÊúâÊïà
                if (!audioFile) {
                    alert('Èü≥È¢ëÊñá‰ª∂‰∏çÂèØÁî®');
                    return;
                }
                
                // ÂÅúÊ≠¢ÂΩìÂâçÊí≠ÊîæÁöÑÈü≥È¢ë
                const allAudioElements = document.querySelectorAll('audio');
                allAudioElements.forEach(audio => {
                    audio.pause();
                    audio.currentTime = 0;
                });
                
                // ‰ªéaudioFile‰∏≠ÊèêÂèñÊñá‰ª∂Âêç
                const filename = audioFile.split('/').pop();
                
                // ÊûÑÈÄ†Ê≠£Á°ÆÁöÑURLË∑ØÂæÑ
                const audioUrl = '/tts_audio/' + filename;
                
                // ÂàõÂª∫Êñ∞ÁöÑÈü≥È¢ëÂØπË±°Âπ∂Êí≠Êîæ
                const audio = new Audio(audioUrl);
                audio.play()
                    .then(() => {
                        console.log('Èü≥È¢ëÊí≠ÊîæÊàêÂäü: ' + audioUrl);
                    })
                    .catch(error => {
                        console.error('Èü≥È¢ëÊí≠ÊîæÂ§±Ë¥•:', error);
                        alert('Èü≥È¢ëÊí≠ÊîæÂ§±Ë¥•: ' + error.message + '\nÊñá‰ª∂Ë∑ØÂæÑ: ' + audioUrl);
                    });
            } catch (error) {
                console.error('Êí≠ÊîæÈü≥È¢ëÂ§±Ë¥•:', error);
                alert('Êí≠ÊîæÈü≥È¢ëÂ§±Ë¥•: ' + error.message);
            }
        }
        
        // Ëé∑Âèñ‰∏≠ÊñáÂêçÁß∞
        function getChineseName(key) {
            const names = {
                'pronunciation': 'ÂèëÈü≥',
                'fluency': 'ÊµÅÂà©Â∫¶',
                'grammar': 'ËØ≠Ê≥ï',
                'vocabulary': 'ËØçÊ±á',
                'content': 'ÂÜÖÂÆπ',
                'immediate_actions': 'Á´ãÂç≥Ë°åÂä®',
                'practice_methods': 'ÁªÉ‰π†ÊñπÊ≥ï',
                'learning_resources': 'Â≠¶‰π†ËµÑÊ∫ê'
            };
            return names[key] || key;
        }
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    """‰∏ªÈ°µ"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/api/evaluate', methods=['POST'])
def api_evaluate():
    """Èü≥È¢ëËØÑ‰º∞API"""
    try:
        # Ê£ÄÊü•Êñá‰ª∂
        if 'audio_file' not in request.files:
            return jsonify({'error': 'Ê≤°Êúâ‰∏ä‰º†Èü≥È¢ëÊñá‰ª∂'}), 400
        
        file = request.files['audio_file']
        if file.filename == '':
            return jsonify({'error': 'Ê≤°ÊúâÈÄâÊã©Êñá‰ª∂'}), 400
        
        if not allowed_file(file.filename):
            return jsonify({'error': f'‰∏çÊîØÊåÅÁöÑÊñá‰ª∂Ê†ºÂºèÔºåÊîØÊåÅÊ†ºÂºè: {", ".join(ALLOWED_EXTENSIONS)}'}), 400
        
        # ‰øùÂ≠ò‰∏ä‰º†ÁöÑÊñá‰ª∂
        filename = secure_filename(file.filename) # type: ignore
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}_{filename}"
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)
        
        # Ëé∑ÂèñÂèÇÊï∞
        prompt_type = request.form.get('prompt_type', 'professional_expert_evaluation')
        
        logger.info(f"ÂºÄÂßãËØÑ‰º∞Èü≥È¢ëÊñá‰ª∂: {filename}")
        
        # Ë∞ÉÁî®Â¢ûÂº∫ÁâàÊé®ÁêÜËÑöÊú¨
        cmd = [
            'python', '/home/huangshiang/Eng-speak-correction/qwen_omni_local/enhanced_inference.py',
            '--input', filepath,
            '--type', 'audio',
            '--prompt', prompt_type,
            '--config', '/home/huangshiang/Eng-speak-correction/qwen_omni_local/prompts.yml'
        ]
        
        # ÊâßË°åËØÑ‰º∞
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode != 0:
            logger.error(f"ËØÑ‰º∞Â§±Ë¥•: {result.stderr}")
            return jsonify({'error': f'ËØÑ‰º∞Â§±Ë¥•: {result.stderr}'}), 500
        
        # Êü•ÊâæÁîüÊàêÁöÑÁªìÊûúÊñá‰ª∂
        result_files = [f for f in os.listdir('.') if f.startswith('evaluation_result_') and f.endswith('.json')]
        if not result_files:
            return jsonify({'error': 'Ê≤°ÊúâÊâæÂà∞ËØÑ‰º∞ÁªìÊûúÊñá‰ª∂'}), 500
        
        # ËØªÂèñÊúÄÊñ∞ÁöÑÁªìÊûúÊñá‰ª∂
        latest_result_file = sorted(result_files)[-1]
        with open(latest_result_file, 'r', encoding='utf-8') as f:
            evaluation_result = json.load(f)

        # Ê∑ªÂä†TTSÂäüËÉΩ
        logger.info("üéµ ÂºÄÂßãÁîüÊàêTTSÈü≥È¢ëÊñá‰ª∂...")
        try:
            evaluation_result = tts_service.convert_evaluation_result(evaluation_result)
            logger.info("‚úÖ TTSÈü≥È¢ëÁîüÊàêÂÆåÊàê")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è TTSÈü≥È¢ëÁîüÊàêÂ§±Ë¥•: {e}")
            evaluation_result["tts_error"] = str(e)
        
        # ÁßªÂä®ÁªìÊûúÊñá‰ª∂Âà∞resultsÁõÆÂΩï
        result_filename = f"{timestamp}_result.json"
        result_path = os.path.join(RESULTS_FOLDER, result_filename)
        os.rename(latest_result_file, result_path)
        
        # Ê∏ÖÁêÜ‰∏ä‰º†ÁöÑÊñá‰ª∂ÔºàÂèØÈÄâÔºâ
        # os.remove(filepath)
        
        logger.info(f"ËØÑ‰º∞ÂÆåÊàê: {filename}")
        return jsonify(evaluation_result)
        
    except subprocess.TimeoutExpired:
        return jsonify({'error': 'ËØÑ‰º∞Ë∂ÖÊó∂ÔºåËØ∑Â∞ùËØïËæÉÁü≠ÁöÑÈü≥È¢ëÊñá‰ª∂'}), 500
    except Exception as e:
        logger.error(f"APIÈîôËØØ: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/status')
def api_status():
    """Á≥ªÁªüÁä∂ÊÄÅ"""
    return jsonify({
        'status': 'running',
        'timestamp': datetime.now().isoformat(),
        'upload_folder': UPLOAD_FOLDER,
        'results_folder': RESULTS_FOLDER,
        'supported_formats': list(ALLOWED_EXTENSIONS)
    })

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    """ËÆøÈóÆ‰∏ä‰º†ÁöÑÊñá‰ª∂"""
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route('/results/<filename>')
def result_file(filename):
    """ËÆøÈóÆÁªìÊûúÊñá‰ª∂"""
    return send_from_directory(RESULTS_FOLDER, filename)

@app.route('/tts_audio/<filename>')
def tts_audio_file(filename):
    """ËÆøÈóÆTTSÈü≥È¢ëÊñá‰ª∂"""
    return send_from_directory('tts_audio', filename)

@app.route('/api/cleanup', methods=['POST'])
def api_cleanup():
    """Ê∏ÖÁêÜ‰∏ä‰º†Êñá‰ª∂ÂíåÁªìÊûúÊñá‰ª∂"""
    try:
        # Ê∏ÖÁêÜ‰∏ä‰º†Êñá‰ª∂
        upload_files = []
        if os.path.exists(UPLOAD_FOLDER):
            upload_files = [f for f in os.listdir(UPLOAD_FOLDER) if os.path.isfile(os.path.join(UPLOAD_FOLDER, f))]
            for file in upload_files:
                os.remove(os.path.join(UPLOAD_FOLDER, file))

        # Ê∏ÖÁêÜÁªìÊûúÊñá‰ª∂
        result_files = []
        if os.path.exists(RESULTS_FOLDER):
            result_files = [f for f in os.listdir(RESULTS_FOLDER) if os.path.isfile(os.path.join(RESULTS_FOLDER, f))]
            for file in result_files:
                os.remove(os.path.join(RESULTS_FOLDER, file))

        # Ê∏ÖÁêÜTTSÈü≥È¢ëÊñá‰ª∂
        tts_files = []
        tts_audio_dir = 'tts_audio'
        if os.path.exists(tts_audio_dir):
            tts_files = [f for f in os.listdir(tts_audio_dir) if os.path.isfile(os.path.join(tts_audio_dir, f)) and f.endswith('.wav')]
            for file in tts_files:
                os.remove(os.path.join(tts_audio_dir, file))

        # Ê∏ÖÁêÜÂΩìÂâçÁõÆÂΩï‰∏ãÁöÑËØÑ‰º∞ÁªìÊûúÊñá‰ª∂
        current_dir_files = [f for f in os.listdir('.') if f.startswith('evaluation_result_') and f.endswith('.json')]
        for file in current_dir_files:
            os.remove(file)

        logger.info(f"Ê∏ÖÁêÜÂÆåÊàê: {len(upload_files)} ‰∏™‰∏ä‰º†Êñá‰ª∂, {len(result_files)} ‰∏™ÁªìÊûúÊñá‰ª∂, {len(tts_files)} ‰∏™TTSÈü≥È¢ëÊñá‰ª∂, {len(current_dir_files)} ‰∏™ËØÑ‰º∞Êñá‰ª∂")

        return jsonify({
            'success': True,
            'message': f'Ê∏ÖÁêÜÂÆåÊàêÔºÅÂà†Èô§‰∫Ü {len(upload_files + result_files + tts_files + current_dir_files)} ‰∏™Êñá‰ª∂',
            'details': {
                'upload_files': len(upload_files),
                'result_files': len(result_files),
                'tts_files': len(tts_files),
                'evaluation_files': len(current_dir_files)
            }
        })

    except Exception as e:
        logger.error(f"Ê∏ÖÁêÜÂ§±Ë¥•: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

if __name__ == '__main__':
    print("üöÄ ÂêØÂä® Qwen2.5 Omni Âè£ËØ≠ËØÑ‰º∞ Web Â∫îÁî®")
    print("üåê ËÆøÈóÆÂú∞ÂùÄ: http://localhost:5000")
    print("üìÅ ‰∏ä‰º†ÁõÆÂΩï:", UPLOAD_FOLDER)
    print("üìä ÁªìÊûúÁõÆÂΩï:", RESULTS_FOLDER)
    
    app.run(host='0.0.0.0', port=5000, debug=True)
